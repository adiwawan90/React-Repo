{"version":3,"sources":["components/atoms/SearchBox/index.js","components/atoms/Button/index.js","components/atoms/Loading/index.js","components/molecules/UserCard/index.js","components/molecules/UserFollow/index.js","page/App.js","serviceWorker.js","index.js"],"names":["SearchBox","handleChange","placeholder","type","onChange","className","Button","title","rest","Loading","class","UserCard","avatar","name","email","repos","followers","following","getRepos","getFollowers","getFollowing","src","alt","onClick","UserReposList","data","map","id","full_name","html_url","stargazers_count","key","href","UserFollowList","login","avatar_url","repos_url","UserFollow","App","useState","isLoading","setIsLoading","setName","datas","setDatas","setFollowers","setFollowing","setRepos","fetch","then","response","json","MyComponent","undefined","message","public_repos","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.27271cd7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './searchBox.scss';\r\n\r\nconst SearchBox = ({handleChange, placeholder}) => {\r\n    return ( \r\n            <input type=\"search\" placeholder={placeholder} onChange={handleChange} className=\"search\"/>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react';\r\nimport './button.scss';\r\n\r\nconst Button = ({ title, ...rest }) => (\r\n  <button type=\"submit\" className=\"button\" {...rest}>{title}</button>\r\n);\r\n\r\nexport default Button;\r\n","import React from 'react'\r\nimport './loading.scss'\r\nconst Loading = () => {\r\n    return <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n}\r\n\r\nexport default Loading;","import React from 'react'\r\n\r\nconst UserCard = ({avatar, name, email, repos, followers, following, getRepos, getFollowers, getFollowing}) => {\r\n    return (\r\n        <div className=\"profile-user\">\r\n        <img src={avatar} className=\"avatar\" alt=\"logo\" />\r\n        <p>{name}</p>\r\n        <p>{email}</p>\r\n        <div className=\"detail-repos\">\r\n          <div className=\"repos\" onClick={() => getRepos()}>\r\n            <p>Repos</p>\r\n            <p>{repos}</p>\r\n          </div>\r\n          <div className=\"repos\" onClick={() => getFollowers()}>\r\n            <p>followers</p>\r\n            <p>{followers}</p>\r\n          </div>\r\n          <div className=\"repos\" onClick={() => getFollowing()}>\r\n            <p>following</p>\r\n            <p>{following}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default UserCard\r\n","import React from 'react'\r\nimport './userData.scss'\r\n\r\nconst  UserReposList = ({data}) => {\r\n    return (\r\n\t\t\t<ul >\r\n\t\t\t\t{data.map(({ id, full_name, stargazers_count, html_url }) => (\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<li key={id} className='repos-list'>\r\n\t\t\t\t\t\t<h3><a className='user-repos-name' href={html_url}>{full_name}</a></h3>\r\n\t\t\t\t\t\t<div className='user-repos-stars'>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n    )\r\n}\r\nconst UserFollowList = ({data}) => {\r\n    return (\r\n\t\t\t<ul>\r\n\t\t\t\t{data.map(({ id, login, avatar_url, html_url, repos_url }) => (\r\n\t\t\t\t\t<li key={id} className=\"row\">\r\n\t\t\t\t\t\t\t<img className='user-data-img' src={avatar_url} alt=\"avtr\" />\r\n\t\t\t\t\t\t\t<div className=\"follow-details\">\r\n\t\t\t\t\t\t\t\t<h4><a className='user-data-login' href={html_url}>{login}</a></h4>\r\n\t\t\t\t\t\t\t\t<p>repos: {repos_url}</p> \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n    )\r\n}\r\n\r\nconst UserFollow = ({data, type}) => {\r\n\r\n    if (type === 'repo') {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='user-data-grid'>\r\n\t\t\t\t\t<div className=\"data-wrapper\">\r\n\t\t\t\t\t\t<UserReposList data={data} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n    }\r\n    return (\r\n\t\t\t<div className='user-data-grid'>\r\n\t\t\t\t<div className=\"data-wrapper\">\r\n\t\t\t\t\t<UserFollowList data={data} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n    )\r\n}\r\n\r\nexport default UserFollow\r\n","import React, {useState} from 'react';\nimport './App.scss';\nimport { SearchBox, Button, UserCard, UserFollow, Loading } from '../components';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [datas, setDatas] = useState(null)\n  const [followers, setFollowers] = useState([])\n  const [following, setFollowing] = useState([])\n  const [repos, setRepos] = useState([])\n  \n  const getUser = () => {\n    setFollowers([]);\n    setFollowing([]);\n    setRepos([]);\n\n    setIsLoading(true);\n     \n    \n    fetch(`https://api.github.com/users/${name}`)\n    .then(response => response.json())\n    .then(data => {\n      setIsLoading(false);\n\n      setDatas(data);\n    })\n    \n  }\n\n  const getFollowers = () => {\n    setIsLoading(true);\n    \n    fetch(`https://api.github.com/users/${name}/followers`)\n    .then(response => response.json())\n    .then(data => {\n      setIsLoading(false);\n\n      setFollowers(data);\n      setFollowing([]);\n      setRepos([]);\n    })\n    \n  }\n\n  const getRepos = () => {\n    setIsLoading(true);\n    \n    fetch(`https://api.github.com/users/${name}/repos`)\n    .then(response => response.json())\n    .then(data => {\n      setIsLoading(false);\n\n      setRepos(data);\n      setFollowers([]);\n      setFollowing([]);\n    })\n   \n  }\n\n  const getFollowing = () => {\n    setIsLoading(true);\n    fetch(`https://api.github.com/users/${name}/following`)\n    .then(response => response.json())\n    .then(data => {\n      setIsLoading(false);\n\n      setFollowing(data);\n      setFollowers([]);\n      setRepos([]);\n    })\n    \n  }\n\n  const MyComponent = ()=> {\n    if (datas !== null) {\n      if (datas.message !== undefined ) {\n        return <h2>Repository Not Found</h2>\n      } else {\n        return <UserCard \n          avatar={datas.avatar_url} \n          name={datas.name}\n          email={datas.email}\n          repos={datas.public_repos}\n          followers={datas.followers}\n          following={datas.following}\n          getRepos={getRepos}\n          getFollowers={getFollowers}\n          getFollowing={getFollowing}\n        />\n      }\n    }\n    return null\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Github Repos</h1>\n      <SearchBox placeholder=\"Search Repo\" handleChange={(e) => setName(e.target.value)} />\n      <Button title=\"Search\" onClick={() => getUser()} />\n      \n      {isLoading && (\n        <div className=\"user-data-loading\">\n          <Loading />\n        </div>\n      )}\n      \n      <MyComponent />\n\n      <UserFollow data={followers} />\n      <UserFollow data={following} />\n      <UserFollow data={repos} type=\"repo\" />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './page/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}